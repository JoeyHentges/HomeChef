generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")

  receiveMarketingEmails Boolean @default(true) @map("receive_marketing_emails")
  receiveSecurityEmails  Boolean @default(true) @map("receive_security_emails")

  accounts Account[]
  sessions Session[]

  feedback Feedback[]

  recipes        Recipe[]
  recipeComments RecipeComment[]
  RecipeRating   RecipeRating[]
  savedRecipes   SavedRecipe[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Custom Table Schemas
model Feedback {
  id        String   @id @default(cuid())
  message   String
  senderId  String
  createdAt DateTime @default(now()) @map("created_at")

  sender User @relation(fields: [senderId], references: [id])

  @@map("feedback")
}

// START Recipe related models
model Recipe {
  id        String   @id @default(cuid())
  authorId  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  // Core
  image          String?
  title          String
  description    String
  rating         Float   @default(0)
  reviewCount    Int     @default(0)
  prepTime       Int     @default(0)
  cookTime       Int     @default(0)
  additionalTime Int     @default(0)
  servings       Int
  cooksNote      String?
  difficultyId   String
  themeId        String
  public         Boolean @default(false)
  featured       Boolean @default(false)

  ratings      RecipeRating[]
  tags         RecipeTag[]
  ingredients  RecipeIngredient[]
  instructions RecipeInstruction[]
  kitchenTools RecipeKitchenTool[]
  comments     RecipeComment[]

  difficulty   RecipeDifficulty @relation(fields: [difficultyId], references: [id])
  theme        RecipeTheme      @relation(fields: [themeId], references: [id])
  author       User             @relation(fields: [authorId], references: [id])
  savedRecipes SavedRecipe[]

  @@map("recipe")
}

model RecipeRating {
  id       String @id @default(cuid())
  userId   String
  recipeId String
  rating   Int

  user   User   @relation(fields: [userId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])

  @@map("recipe_rating")
}

model RecipeDifficulty {
  id   String @id @default(cuid())
  name String @unique

  recipe Recipe[]

  @@map("recipe_difficulty")
}

model RecipeTheme {
  id   String @id @default(cuid())
  name String @unique

  recipe Recipe[]

  @@map("recipe_theme")
}

model RecipeTag {
  id   String @id @default(cuid())
  name String @unique

  recipes Recipe[]

  @@map("recipe_tags")
}

model RecipeIngredient {
  id          String  @id @default(cuid())
  recipeId    String
  number      Int
  name        String
  quantity    String
  description String?

  recipe Recipe @relation(fields: [recipeId], references: [id])

  @@map("recipe_ingredients")
}

model RecipeInstruction {
  id          String @id @default(cuid())
  recipeId    String
  step        Int
  instruction String

  recipe Recipe @relation(fields: [recipeId], references: [id])

  @@map("recipe_iinstruction")
}

model RecipeComment {
  id       String @id @default(cuid())
  recipeId String
  authorId String
  comment  String
  rating   Float?

  recipe Recipe @relation(fields: [recipeId], references: [id])
  author User   @relation(fields: [authorId], references: [id])

  @@map("recipe_comments")
}

model RecipeKitchenTool {
  id       String @id @default(cuid())
  category String @unique
  name     String
  provider String
  link     String

  recipe Recipe[]

  @@map("recipe_kitchen_tool")
}

model SavedRecipe {
  id       String @id @default(cuid())
  recipeId String
  userId   String

  recipe Recipe @relation(fields: [recipeId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("saved_recipe")
}

// END Recipe related models
